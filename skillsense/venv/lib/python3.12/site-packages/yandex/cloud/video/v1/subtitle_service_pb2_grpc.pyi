"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.operation.operation_pb2
import yandex.cloud.video.v1.subtitle_pb2
import yandex.cloud.video.v1.subtitle_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class SubtitleServiceStub:
    """Subtitle management service."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.subtitle_service_pb2.GetSubtitleRequest,
        yandex.cloud.video.v1.subtitle_pb2.Subtitle,
    ]
    """Get a specific subtitle."""

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.subtitle_service_pb2.ListSubtitlesRequest,
        yandex.cloud.video.v1.subtitle_service_pb2.ListSubtitlesResponse,
    ]
    """List subtitles."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.subtitle_service_pb2.CreateSubtitleRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Create a new subtitle."""

    GenerateUploadURL: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.subtitle_service_pb2.GenerateSubtitleUploadURLRequest,
        yandex.cloud.video.v1.subtitle_service_pb2.GenerateSubtitleUploadURLResponse,
    ]
    """Generate an upload URL to add a new subtitle file."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.subtitle_service_pb2.DeleteSubtitleRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Delete a specific subtitle."""

class SubtitleServiceAsyncStub:
    """Subtitle management service."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.subtitle_service_pb2.GetSubtitleRequest,
        yandex.cloud.video.v1.subtitle_pb2.Subtitle,
    ]
    """Get a specific subtitle."""

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.subtitle_service_pb2.ListSubtitlesRequest,
        yandex.cloud.video.v1.subtitle_service_pb2.ListSubtitlesResponse,
    ]
    """List subtitles."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.subtitle_service_pb2.CreateSubtitleRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Create a new subtitle."""

    GenerateUploadURL: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.subtitle_service_pb2.GenerateSubtitleUploadURLRequest,
        yandex.cloud.video.v1.subtitle_service_pb2.GenerateSubtitleUploadURLResponse,
    ]
    """Generate an upload URL to add a new subtitle file."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.subtitle_service_pb2.DeleteSubtitleRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Delete a specific subtitle."""

class SubtitleServiceServicer(metaclass=abc.ABCMeta):
    """Subtitle management service."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.video.v1.subtitle_service_pb2.GetSubtitleRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.video.v1.subtitle_pb2.Subtitle, collections.abc.Awaitable[yandex.cloud.video.v1.subtitle_pb2.Subtitle]]:
        """Get a specific subtitle."""

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.video.v1.subtitle_service_pb2.ListSubtitlesRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.video.v1.subtitle_service_pb2.ListSubtitlesResponse, collections.abc.Awaitable[yandex.cloud.video.v1.subtitle_service_pb2.ListSubtitlesResponse]]:
        """List subtitles."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.video.v1.subtitle_service_pb2.CreateSubtitleRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Create a new subtitle."""

    @abc.abstractmethod
    def GenerateUploadURL(
        self,
        request: yandex.cloud.video.v1.subtitle_service_pb2.GenerateSubtitleUploadURLRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.video.v1.subtitle_service_pb2.GenerateSubtitleUploadURLResponse, collections.abc.Awaitable[yandex.cloud.video.v1.subtitle_service_pb2.GenerateSubtitleUploadURLResponse]]:
        """Generate an upload URL to add a new subtitle file."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.video.v1.subtitle_service_pb2.DeleteSubtitleRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Delete a specific subtitle."""

def add_SubtitleServiceServicer_to_server(servicer: SubtitleServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

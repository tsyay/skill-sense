"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.operation.operation_pb2
import yandex.cloud.video.v1.playlist_pb2
import yandex.cloud.video.v1.playlist_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class PlaylistServiceStub:
    """Playlist management service."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.playlist_service_pb2.GetPlaylistRequest,
        yandex.cloud.video.v1.playlist_pb2.Playlist,
    ]
    """Get the specific playlist."""

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.playlist_service_pb2.ListPlaylistsRequest,
        yandex.cloud.video.v1.playlist_service_pb2.ListPlaylistsResponse,
    ]
    """List playlists for a channel."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.playlist_service_pb2.CreatePlaylistRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Create playlist."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.playlist_service_pb2.UpdatePlaylistRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Update playlist."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.playlist_service_pb2.DeletePlaylistRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Delete playlist."""

    BatchDelete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.playlist_service_pb2.BatchDeletePlaylistsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Batch delete playlists."""

    GetPlayerURL: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.playlist_service_pb2.GetPlaylistPlayerURLRequest,
        yandex.cloud.video.v1.playlist_service_pb2.GetPlaylistPlayerURLResponse,
    ]
    """Get player url."""

class PlaylistServiceAsyncStub:
    """Playlist management service."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.playlist_service_pb2.GetPlaylistRequest,
        yandex.cloud.video.v1.playlist_pb2.Playlist,
    ]
    """Get the specific playlist."""

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.playlist_service_pb2.ListPlaylistsRequest,
        yandex.cloud.video.v1.playlist_service_pb2.ListPlaylistsResponse,
    ]
    """List playlists for a channel."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.playlist_service_pb2.CreatePlaylistRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Create playlist."""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.playlist_service_pb2.UpdatePlaylistRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Update playlist."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.playlist_service_pb2.DeletePlaylistRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Delete playlist."""

    BatchDelete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.playlist_service_pb2.BatchDeletePlaylistsRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Batch delete playlists."""

    GetPlayerURL: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.video.v1.playlist_service_pb2.GetPlaylistPlayerURLRequest,
        yandex.cloud.video.v1.playlist_service_pb2.GetPlaylistPlayerURLResponse,
    ]
    """Get player url."""

class PlaylistServiceServicer(metaclass=abc.ABCMeta):
    """Playlist management service."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.video.v1.playlist_service_pb2.GetPlaylistRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.video.v1.playlist_pb2.Playlist, collections.abc.Awaitable[yandex.cloud.video.v1.playlist_pb2.Playlist]]:
        """Get the specific playlist."""

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.video.v1.playlist_service_pb2.ListPlaylistsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.video.v1.playlist_service_pb2.ListPlaylistsResponse, collections.abc.Awaitable[yandex.cloud.video.v1.playlist_service_pb2.ListPlaylistsResponse]]:
        """List playlists for a channel."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.video.v1.playlist_service_pb2.CreatePlaylistRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Create playlist."""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.video.v1.playlist_service_pb2.UpdatePlaylistRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Update playlist."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.video.v1.playlist_service_pb2.DeletePlaylistRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Delete playlist."""

    @abc.abstractmethod
    def BatchDelete(
        self,
        request: yandex.cloud.video.v1.playlist_service_pb2.BatchDeletePlaylistsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Batch delete playlists."""

    @abc.abstractmethod
    def GetPlayerURL(
        self,
        request: yandex.cloud.video.v1.playlist_service_pb2.GetPlaylistPlayerURLRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.video.v1.playlist_service_pb2.GetPlaylistPlayerURLResponse, collections.abc.Awaitable[yandex.cloud.video.v1.playlist_service_pb2.GetPlaylistPlayerURLResponse]]:
        """Get player url."""

def add_PlaylistServiceServicer_to_server(servicer: PlaylistServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

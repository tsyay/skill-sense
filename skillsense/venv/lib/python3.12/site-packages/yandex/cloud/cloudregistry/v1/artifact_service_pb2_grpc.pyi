"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.cloudregistry.v1.artifact_pb2
import yandex.cloud.cloudregistry.v1.artifact_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ArtifactServiceStub:
    """A set of methods for managing Artifacts."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.cloudregistry.v1.artifact_service_pb2.GetArtifactRequest,
        yandex.cloud.cloudregistry.v1.artifact_pb2.Artifact,
    ]
    """Returns the specified artifact resource.

    To get the list of available artifact resources, make [RegistryService.ListArtifacts] method call.
    """

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.cloudregistry.v1.artifact_service_pb2.DeleteArtifactRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified artifact."""

class ArtifactServiceAsyncStub:
    """A set of methods for managing Artifacts."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.cloudregistry.v1.artifact_service_pb2.GetArtifactRequest,
        yandex.cloud.cloudregistry.v1.artifact_pb2.Artifact,
    ]
    """Returns the specified artifact resource.

    To get the list of available artifact resources, make [RegistryService.ListArtifacts] method call.
    """

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.cloudregistry.v1.artifact_service_pb2.DeleteArtifactRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified artifact."""

class ArtifactServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing Artifacts."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.cloudregistry.v1.artifact_service_pb2.GetArtifactRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.cloudregistry.v1.artifact_pb2.Artifact, collections.abc.Awaitable[yandex.cloud.cloudregistry.v1.artifact_pb2.Artifact]]:
        """Returns the specified artifact resource.

        To get the list of available artifact resources, make [RegistryService.ListArtifacts] method call.
        """

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.cloudregistry.v1.artifact_service_pb2.DeleteArtifactRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified artifact."""

def add_ArtifactServiceServicer_to_server(servicer: ArtifactServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.iam.v1.workload.federated_credential_pb2
import yandex.cloud.iam.v1.workload.federated_credential_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class FederatedCredentialServiceStub:
    """A set of methods for managing federated credentials."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.workload.federated_credential_service_pb2.GetFederatedCredentialRequest,
        yandex.cloud.iam.v1.workload.federated_credential_pb2.FederatedCredential,
    ]
    """Returns the specified federated credential.

    To get the list of available federated credentials, make a [List] request.
    """

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.workload.federated_credential_service_pb2.ListFederatedCredentialsRequest,
        yandex.cloud.iam.v1.workload.federated_credential_service_pb2.ListFederatedCredentialsResponse,
    ]
    """Retrieves the list of federated credentials for the specified service account."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.workload.federated_credential_service_pb2.CreateFederatedCredentialRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a federated credential for the specified service account."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.workload.federated_credential_service_pb2.DeleteFederatedCredentialRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified federated credential."""

class FederatedCredentialServiceAsyncStub:
    """A set of methods for managing federated credentials."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.workload.federated_credential_service_pb2.GetFederatedCredentialRequest,
        yandex.cloud.iam.v1.workload.federated_credential_pb2.FederatedCredential,
    ]
    """Returns the specified federated credential.

    To get the list of available federated credentials, make a [List] request.
    """

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.workload.federated_credential_service_pb2.ListFederatedCredentialsRequest,
        yandex.cloud.iam.v1.workload.federated_credential_service_pb2.ListFederatedCredentialsResponse,
    ]
    """Retrieves the list of federated credentials for the specified service account."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.workload.federated_credential_service_pb2.CreateFederatedCredentialRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates a federated credential for the specified service account."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.iam.v1.workload.federated_credential_service_pb2.DeleteFederatedCredentialRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes the specified federated credential."""

class FederatedCredentialServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing federated credentials."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.iam.v1.workload.federated_credential_service_pb2.GetFederatedCredentialRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.iam.v1.workload.federated_credential_pb2.FederatedCredential, collections.abc.Awaitable[yandex.cloud.iam.v1.workload.federated_credential_pb2.FederatedCredential]]:
        """Returns the specified federated credential.

        To get the list of available federated credentials, make a [List] request.
        """

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.iam.v1.workload.federated_credential_service_pb2.ListFederatedCredentialsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.iam.v1.workload.federated_credential_service_pb2.ListFederatedCredentialsResponse, collections.abc.Awaitable[yandex.cloud.iam.v1.workload.federated_credential_service_pb2.ListFederatedCredentialsResponse]]:
        """Retrieves the list of federated credentials for the specified service account."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.iam.v1.workload.federated_credential_service_pb2.CreateFederatedCredentialRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates a federated credential for the specified service account."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.iam.v1.workload.federated_credential_service_pb2.DeleteFederatedCredentialRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes the specified federated credential."""

def add_FederatedCredentialServiceServicer_to_server(servicer: FederatedCredentialServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

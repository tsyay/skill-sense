"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.k8s.marketplace.v1.helm_release_pb2
import yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class HelmReleaseServiceStub:
    """A set of methods for managing Helm release."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.ListHelmReleasesRequest,
        yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.ListHelmReleasesResponse,
    ]
    """Retrieves the list of Helm releases in the specified Kubernetes Cluster."""

    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.GetHelmReleaseRequest,
        yandex.cloud.k8s.marketplace.v1.helm_release_pb2.HelmRelease,
    ]
    """Returns the specified Helm release."""

    Install: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.InstallHelmReleaseRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Installs helm release into specified Kubernetes Cluster."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.UpdateHelmReleaseRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates helm release."""

    Uninstall: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.UninstallHelmReleaseRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Uninstalls helm release."""

class HelmReleaseServiceAsyncStub:
    """A set of methods for managing Helm release."""

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.ListHelmReleasesRequest,
        yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.ListHelmReleasesResponse,
    ]
    """Retrieves the list of Helm releases in the specified Kubernetes Cluster."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.GetHelmReleaseRequest,
        yandex.cloud.k8s.marketplace.v1.helm_release_pb2.HelmRelease,
    ]
    """Returns the specified Helm release."""

    Install: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.InstallHelmReleaseRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Installs helm release into specified Kubernetes Cluster."""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.UpdateHelmReleaseRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates helm release."""

    Uninstall: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.UninstallHelmReleaseRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Uninstalls helm release."""

class HelmReleaseServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing Helm release."""

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.ListHelmReleasesRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.ListHelmReleasesResponse, collections.abc.Awaitable[yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.ListHelmReleasesResponse]]:
        """Retrieves the list of Helm releases in the specified Kubernetes Cluster."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.GetHelmReleaseRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.k8s.marketplace.v1.helm_release_pb2.HelmRelease, collections.abc.Awaitable[yandex.cloud.k8s.marketplace.v1.helm_release_pb2.HelmRelease]]:
        """Returns the specified Helm release."""

    @abc.abstractmethod
    def Install(
        self,
        request: yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.InstallHelmReleaseRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Installs helm release into specified Kubernetes Cluster."""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.UpdateHelmReleaseRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates helm release."""

    @abc.abstractmethod
    def Uninstall(
        self,
        request: yandex.cloud.k8s.marketplace.v1.helm_release_service_pb2.UninstallHelmReleaseRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Uninstalls helm release."""

def add_HelmReleaseServiceServicer_to_server(servicer: HelmReleaseServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

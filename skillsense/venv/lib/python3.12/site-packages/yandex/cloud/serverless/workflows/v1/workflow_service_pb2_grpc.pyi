"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.operation.operation_pb2
import yandex.cloud.serverless.workflows.v1.workflow_service_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class WorkflowServiceStub:
    """Set of methods for managing Workflows."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.CreateWorkflowRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates Workflow in specified folder."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.UpdateWorkflowRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates specified Workflow."""

    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.GetWorkflowRequest,
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.GetWorkflowResponse,
    ]
    """Retrieves specified Workflow."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.DeleteWorkflowRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes specified Workflow."""

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.ListWorkflowsRequest,
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.ListWorkflowsResponse,
    ]
    """Retrieves list of Workflows in specified folder."""

    ListOperations: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.ListOperationsRequest,
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.ListOperationsResponse,
    ]
    """Lists operations for specified Workflow."""

class WorkflowServiceAsyncStub:
    """Set of methods for managing Workflows."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.CreateWorkflowRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates Workflow in specified folder."""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.UpdateWorkflowRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Updates specified Workflow."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.GetWorkflowRequest,
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.GetWorkflowResponse,
    ]
    """Retrieves specified Workflow."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.DeleteWorkflowRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Deletes specified Workflow."""

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.ListWorkflowsRequest,
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.ListWorkflowsResponse,
    ]
    """Retrieves list of Workflows in specified folder."""

    ListOperations: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.ListOperationsRequest,
        yandex.cloud.serverless.workflows.v1.workflow_service_pb2.ListOperationsResponse,
    ]
    """Lists operations for specified Workflow."""

class WorkflowServiceServicer(metaclass=abc.ABCMeta):
    """Set of methods for managing Workflows."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.serverless.workflows.v1.workflow_service_pb2.CreateWorkflowRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates Workflow in specified folder."""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.serverless.workflows.v1.workflow_service_pb2.UpdateWorkflowRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Updates specified Workflow."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.serverless.workflows.v1.workflow_service_pb2.GetWorkflowRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.serverless.workflows.v1.workflow_service_pb2.GetWorkflowResponse, collections.abc.Awaitable[yandex.cloud.serverless.workflows.v1.workflow_service_pb2.GetWorkflowResponse]]:
        """Retrieves specified Workflow."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.serverless.workflows.v1.workflow_service_pb2.DeleteWorkflowRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Deletes specified Workflow."""

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.serverless.workflows.v1.workflow_service_pb2.ListWorkflowsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.serverless.workflows.v1.workflow_service_pb2.ListWorkflowsResponse, collections.abc.Awaitable[yandex.cloud.serverless.workflows.v1.workflow_service_pb2.ListWorkflowsResponse]]:
        """Retrieves list of Workflows in specified folder."""

    @abc.abstractmethod
    def ListOperations(
        self,
        request: yandex.cloud.serverless.workflows.v1.workflow_service_pb2.ListOperationsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.serverless.workflows.v1.workflow_service_pb2.ListOperationsResponse, collections.abc.Awaitable[yandex.cloud.serverless.workflows.v1.workflow_service_pb2.ListOperationsResponse]]:
        """Lists operations for specified Workflow."""

def add_WorkflowServiceServicer_to_server(servicer: WorkflowServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

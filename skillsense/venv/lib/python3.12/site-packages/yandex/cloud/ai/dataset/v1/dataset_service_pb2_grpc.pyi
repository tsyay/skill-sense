"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.ai.dataset.v1.dataset_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class DatasetServiceStub:
    """A set of methods for managing datasets."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Describe: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.DescribeDatasetRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.DescribeDatasetResponse,
    ]
    """Returns dataset information by dataset id."""

    Validate: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ValidateDatasetRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Starts dataset validation process."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.CreateDatasetRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.CreateDatasetResponse,
    ]
    """Creates dataset."""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.UpdateDatasetRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.UpdateDatasetResponse,
    ]
    """Updates dataset."""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.DeleteDatasetRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.DeleteDatasetResponse,
    ]
    """Deletes dataset."""

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListDatasetsRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListDatasetsResponse,
    ]
    """Lists datasets in specified folder."""

    ListUploadFormats: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListUploadFormatsRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListUploadFormatsResponse,
    ]
    """Deprecated. Use ListUploadSchemas."""

    ListUploadSchemas: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListUploadSchemasRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListUploadSchemasResponse,
    ]
    """Lists supported dataset upload formats types and schemas for the specified dataset task type."""

    GetUploadDraftUrl: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetUploadDraftUrlRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetUploadDraftUrlResponse,
    ]
    """Returns an S3 presigned URL for dataset upload.
    This method only applicable if the dataset size does not exceed 5GB.
    """

    GetDownloadUrls: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetDownloadUrlsRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetDownloadUrlsResponse,
    ]
    """Get urls to download dataset"""

    StartMultipartUploadDraft: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.StartMultipartUploadDraftRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.StartMultipartUploadDraftResponse,
    ]
    """Returns a list of S3 presigned URLs for multipart upload of dataset."""

    FinishMultipartUploadDraft: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.FinishMultipartUploadDraftRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.FinishMultipartUploadDraftResponse,
    ]
    """Finishes multipart upload of the dataset."""

    ListTypes: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListTypesRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListTypesResponse,
    ]
    """Returns a list of dataset types"""

    GetPreview: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetDatasetPreviewRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetDatasetPreviewResponse,
    ]
    """Returns a preview of dataset types"""

    ListOperationsIds: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListOperationsIdsRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListOperationsIdsResponse,
    ]

class DatasetServiceAsyncStub:
    """A set of methods for managing datasets."""

    Describe: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.DescribeDatasetRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.DescribeDatasetResponse,
    ]
    """Returns dataset information by dataset id."""

    Validate: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ValidateDatasetRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Starts dataset validation process."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.CreateDatasetRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.CreateDatasetResponse,
    ]
    """Creates dataset."""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.UpdateDatasetRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.UpdateDatasetResponse,
    ]
    """Updates dataset."""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.DeleteDatasetRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.DeleteDatasetResponse,
    ]
    """Deletes dataset."""

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListDatasetsRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListDatasetsResponse,
    ]
    """Lists datasets in specified folder."""

    ListUploadFormats: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListUploadFormatsRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListUploadFormatsResponse,
    ]
    """Deprecated. Use ListUploadSchemas."""

    ListUploadSchemas: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListUploadSchemasRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListUploadSchemasResponse,
    ]
    """Lists supported dataset upload formats types and schemas for the specified dataset task type."""

    GetUploadDraftUrl: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetUploadDraftUrlRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetUploadDraftUrlResponse,
    ]
    """Returns an S3 presigned URL for dataset upload.
    This method only applicable if the dataset size does not exceed 5GB.
    """

    GetDownloadUrls: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetDownloadUrlsRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetDownloadUrlsResponse,
    ]
    """Get urls to download dataset"""

    StartMultipartUploadDraft: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.StartMultipartUploadDraftRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.StartMultipartUploadDraftResponse,
    ]
    """Returns a list of S3 presigned URLs for multipart upload of dataset."""

    FinishMultipartUploadDraft: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.FinishMultipartUploadDraftRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.FinishMultipartUploadDraftResponse,
    ]
    """Finishes multipart upload of the dataset."""

    ListTypes: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListTypesRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListTypesResponse,
    ]
    """Returns a list of dataset types"""

    GetPreview: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetDatasetPreviewRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetDatasetPreviewResponse,
    ]
    """Returns a preview of dataset types"""

    ListOperationsIds: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListOperationsIdsRequest,
        yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListOperationsIdsResponse,
    ]

class DatasetServiceServicer(metaclass=abc.ABCMeta):
    """A set of methods for managing datasets."""

    @abc.abstractmethod
    def Describe(
        self,
        request: yandex.cloud.ai.dataset.v1.dataset_service_pb2.DescribeDatasetRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.dataset.v1.dataset_service_pb2.DescribeDatasetResponse, collections.abc.Awaitable[yandex.cloud.ai.dataset.v1.dataset_service_pb2.DescribeDatasetResponse]]:
        """Returns dataset information by dataset id."""

    @abc.abstractmethod
    def Validate(
        self,
        request: yandex.cloud.ai.dataset.v1.dataset_service_pb2.ValidateDatasetRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Starts dataset validation process."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.ai.dataset.v1.dataset_service_pb2.CreateDatasetRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.dataset.v1.dataset_service_pb2.CreateDatasetResponse, collections.abc.Awaitable[yandex.cloud.ai.dataset.v1.dataset_service_pb2.CreateDatasetResponse]]:
        """Creates dataset."""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.ai.dataset.v1.dataset_service_pb2.UpdateDatasetRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.dataset.v1.dataset_service_pb2.UpdateDatasetResponse, collections.abc.Awaitable[yandex.cloud.ai.dataset.v1.dataset_service_pb2.UpdateDatasetResponse]]:
        """Updates dataset."""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.ai.dataset.v1.dataset_service_pb2.DeleteDatasetRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.dataset.v1.dataset_service_pb2.DeleteDatasetResponse, collections.abc.Awaitable[yandex.cloud.ai.dataset.v1.dataset_service_pb2.DeleteDatasetResponse]]:
        """Deletes dataset."""

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListDatasetsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListDatasetsResponse, collections.abc.Awaitable[yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListDatasetsResponse]]:
        """Lists datasets in specified folder."""

    @abc.abstractmethod
    def ListUploadFormats(
        self,
        request: yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListUploadFormatsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListUploadFormatsResponse, collections.abc.Awaitable[yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListUploadFormatsResponse]]:
        """Deprecated. Use ListUploadSchemas."""

    @abc.abstractmethod
    def ListUploadSchemas(
        self,
        request: yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListUploadSchemasRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListUploadSchemasResponse, collections.abc.Awaitable[yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListUploadSchemasResponse]]:
        """Lists supported dataset upload formats types and schemas for the specified dataset task type."""

    @abc.abstractmethod
    def GetUploadDraftUrl(
        self,
        request: yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetUploadDraftUrlRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetUploadDraftUrlResponse, collections.abc.Awaitable[yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetUploadDraftUrlResponse]]:
        """Returns an S3 presigned URL for dataset upload.
        This method only applicable if the dataset size does not exceed 5GB.
        """

    @abc.abstractmethod
    def GetDownloadUrls(
        self,
        request: yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetDownloadUrlsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetDownloadUrlsResponse, collections.abc.Awaitable[yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetDownloadUrlsResponse]]:
        """Get urls to download dataset"""

    @abc.abstractmethod
    def StartMultipartUploadDraft(
        self,
        request: yandex.cloud.ai.dataset.v1.dataset_service_pb2.StartMultipartUploadDraftRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.dataset.v1.dataset_service_pb2.StartMultipartUploadDraftResponse, collections.abc.Awaitable[yandex.cloud.ai.dataset.v1.dataset_service_pb2.StartMultipartUploadDraftResponse]]:
        """Returns a list of S3 presigned URLs for multipart upload of dataset."""

    @abc.abstractmethod
    def FinishMultipartUploadDraft(
        self,
        request: yandex.cloud.ai.dataset.v1.dataset_service_pb2.FinishMultipartUploadDraftRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.dataset.v1.dataset_service_pb2.FinishMultipartUploadDraftResponse, collections.abc.Awaitable[yandex.cloud.ai.dataset.v1.dataset_service_pb2.FinishMultipartUploadDraftResponse]]:
        """Finishes multipart upload of the dataset."""

    @abc.abstractmethod
    def ListTypes(
        self,
        request: yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListTypesRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListTypesResponse, collections.abc.Awaitable[yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListTypesResponse]]:
        """Returns a list of dataset types"""

    @abc.abstractmethod
    def GetPreview(
        self,
        request: yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetDatasetPreviewRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetDatasetPreviewResponse, collections.abc.Awaitable[yandex.cloud.ai.dataset.v1.dataset_service_pb2.GetDatasetPreviewResponse]]:
        """Returns a preview of dataset types"""

    @abc.abstractmethod
    def ListOperationsIds(
        self,
        request: yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListOperationsIdsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListOperationsIdsResponse, collections.abc.Awaitable[yandex.cloud.ai.dataset.v1.dataset_service_pb2.ListOperationsIdsResponse]]: ...

def add_DatasetServiceServicer_to_server(servicer: DatasetServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.ai.assistants.v1.searchindex.search_index_file_pb2
import yandex.cloud.ai.assistants.v1.searchindex.search_index_file_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class SearchIndexFileServiceStub:
    """SearchIndexFileService provides operations for managing files within search indexes."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    BatchCreate: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.searchindex.search_index_file_service_pb2.BatchCreateSearchIndexFileRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates multiple files within a search index in [asynchronous mode](/docs/foundation-models/concepts/#working-mode)."""

    Get: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.searchindex.search_index_file_service_pb2.GetSearchIndexFileRequest,
        yandex.cloud.ai.assistants.v1.searchindex.search_index_file_pb2.SearchIndexFile,
    ]
    """Retrieves details of a specific file that has been indexed within a search index."""

    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.searchindex.search_index_file_service_pb2.ListSearchIndexFilesRequest,
        yandex.cloud.ai.assistants.v1.searchindex.search_index_file_service_pb2.ListSearchIndexFilesResponse,
    ]
    """List files that are indexed within a specific search index."""

class SearchIndexFileServiceAsyncStub:
    """SearchIndexFileService provides operations for managing files within search indexes."""

    BatchCreate: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.searchindex.search_index_file_service_pb2.BatchCreateSearchIndexFileRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates multiple files within a search index in [asynchronous mode](/docs/foundation-models/concepts/#working-mode)."""

    Get: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.searchindex.search_index_file_service_pb2.GetSearchIndexFileRequest,
        yandex.cloud.ai.assistants.v1.searchindex.search_index_file_pb2.SearchIndexFile,
    ]
    """Retrieves details of a specific file that has been indexed within a search index."""

    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.ai.assistants.v1.searchindex.search_index_file_service_pb2.ListSearchIndexFilesRequest,
        yandex.cloud.ai.assistants.v1.searchindex.search_index_file_service_pb2.ListSearchIndexFilesResponse,
    ]
    """List files that are indexed within a specific search index."""

class SearchIndexFileServiceServicer(metaclass=abc.ABCMeta):
    """SearchIndexFileService provides operations for managing files within search indexes."""

    @abc.abstractmethod
    def BatchCreate(
        self,
        request: yandex.cloud.ai.assistants.v1.searchindex.search_index_file_service_pb2.BatchCreateSearchIndexFileRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates multiple files within a search index in [asynchronous mode](/docs/foundation-models/concepts/#working-mode)."""

    @abc.abstractmethod
    def Get(
        self,
        request: yandex.cloud.ai.assistants.v1.searchindex.search_index_file_service_pb2.GetSearchIndexFileRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.assistants.v1.searchindex.search_index_file_pb2.SearchIndexFile, collections.abc.Awaitable[yandex.cloud.ai.assistants.v1.searchindex.search_index_file_pb2.SearchIndexFile]]:
        """Retrieves details of a specific file that has been indexed within a search index."""

    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.ai.assistants.v1.searchindex.search_index_file_service_pb2.ListSearchIndexFilesRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.ai.assistants.v1.searchindex.search_index_file_service_pb2.ListSearchIndexFilesResponse, collections.abc.Awaitable[yandex.cloud.ai.assistants.v1.searchindex.search_index_file_service_pb2.ListSearchIndexFilesResponse]]:
        """List files that are indexed within a specific search index."""

def add_SearchIndexFileServiceServicer_to_server(servicer: SearchIndexFileServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

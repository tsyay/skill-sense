"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import typing
import yandex.cloud.mdb.greenplum.v1.resource_groups_pb2
import yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2
import yandex.cloud.operation.operation_pb2

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ResourceGroupServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    List: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.ListResourceGroupsRequest,
        yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.ListResourceGroupsResponse,
    ]
    """List all resource group"""

    GetAtRevision: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.GetResourceGroupAtRevisionRequest,
        yandex.cloud.mdb.greenplum.v1.resource_groups_pb2.ResourceGroup,
    ]
    """Returns the specified resource group at revision."""

    Create: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.CreateResourceGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates resource group"""

    Update: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.UpdateResourceGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Update resource group"""

    Delete: grpc.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.DeleteResourceGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Delete resource group"""

class ResourceGroupServiceAsyncStub:
    List: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.ListResourceGroupsRequest,
        yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.ListResourceGroupsResponse,
    ]
    """List all resource group"""

    GetAtRevision: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.GetResourceGroupAtRevisionRequest,
        yandex.cloud.mdb.greenplum.v1.resource_groups_pb2.ResourceGroup,
    ]
    """Returns the specified resource group at revision."""

    Create: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.CreateResourceGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Creates resource group"""

    Update: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.UpdateResourceGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Update resource group"""

    Delete: grpc.aio.UnaryUnaryMultiCallable[
        yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.DeleteResourceGroupRequest,
        yandex.cloud.operation.operation_pb2.Operation,
    ]
    """Delete resource group"""

class ResourceGroupServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def List(
        self,
        request: yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.ListResourceGroupsRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.ListResourceGroupsResponse, collections.abc.Awaitable[yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.ListResourceGroupsResponse]]:
        """List all resource group"""

    @abc.abstractmethod
    def GetAtRevision(
        self,
        request: yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.GetResourceGroupAtRevisionRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.mdb.greenplum.v1.resource_groups_pb2.ResourceGroup, collections.abc.Awaitable[yandex.cloud.mdb.greenplum.v1.resource_groups_pb2.ResourceGroup]]:
        """Returns the specified resource group at revision."""

    @abc.abstractmethod
    def Create(
        self,
        request: yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.CreateResourceGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Creates resource group"""

    @abc.abstractmethod
    def Update(
        self,
        request: yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.UpdateResourceGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Update resource group"""

    @abc.abstractmethod
    def Delete(
        self,
        request: yandex.cloud.mdb.greenplum.v1.resource_groups_service_pb2.DeleteResourceGroupRequest,
        context: _ServicerContext,
    ) -> typing.Union[yandex.cloud.operation.operation_pb2.Operation, collections.abc.Awaitable[yandex.cloud.operation.operation_pb2.Operation]]:
        """Delete resource group"""

def add_ResourceGroupServiceServicer_to_server(servicer: ResourceGroupServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
